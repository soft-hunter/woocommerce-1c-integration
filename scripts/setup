#!/usr/bin/env bash
# WooCommerce 1C Exchange - Development Setup Script
# This script sets up a local development environment for the plugin

set -eu -o pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in the right directory
if [[ ! -f "woocommerce-1c.php" ]]; then
    log_error "This script must be run from the plugin root directory"
    exit 1
fi

project_dir=$PWD
plugin_name="woocommerce-1c"

log_info "Setting up WooCommerce 1C Exchange development environment..."

# Check if WordPress is available
if ! command -v wp &> /dev/null; then
    log_error "WP-CLI is required but not installed. Please install WP-CLI first."
    exit 1
fi

# Check if we're in a WordPress environment
if [[ ! -f "wp-config.php" ]] && [[ ! -f "../wp-config.php" ]] && [[ ! -f "../../wp-config.php" ]]; then
    log_error "WordPress installation not found. Please run this script from within a WordPress installation."
    exit 1
fi

# Find WordPress root
wp_root="."
if [[ -f "../wp-config.php" ]]; then
    wp_root=".."
elif [[ -f "../../wp-config.php" ]]; then
    wp_root="../.."
fi

log_info "WordPress root found at: $wp_root"

# Create symlink to plugins directory
plugin_link="$wp_root/wp-content/plugins/$plugin_name"

if [[ ! -L "$plugin_link" ]]; then
    log_info "Creating plugin symlink..."
    ln -s "$project_dir" "$plugin_link"
    log_info "Plugin symlink created: $plugin_link"
else
    log_warn "Plugin symlink already exists"
fi

# Activate the plugin
log_info "Activating plugin..."
if wp plugin activate "$plugin_name" --path="$wp_root"; then
    log_info "Plugin activated successfully"
else
    log_error "Failed to activate plugin"
    exit 1
fi

# Create required directories
log_info "Creating required directories..."

upload_dir=$(wp eval 'echo wp_upload_dir()["basedir"];' --path="$wp_root")
data_dir="$upload_dir/woocommerce_uploads/1c-exchange"

directories=(
    "$data_dir"
    "$data_dir/catalog"
    "$data_dir/sale"
    "$data_dir/logs"
    "$data_dir/temp"
)

for dir in "${directories[@]}"; do
    if [[ ! -d "$dir" ]]; then
        mkdir -p "$dir"
        chmod 755 "$dir"
        
        # Add security files
        echo "" > "$dir/index.html"
        
        if [[ $(basename "$dir") == "logs" ]]; then
            echo "Deny from all" > "$dir/.htaccess"
        else
            cat > "$dir/.htaccess" << 'EOF'
Deny from all
<Files "*.xml">
  Allow from all
</Files>
EOF
        fi
        
        log_info "Created directory: $dir"
    else
        log_warn "Directory already exists: $dir"
    fi
done

# Check plugin requirements
log_info "Checking plugin requirements..."

# Check if WooCommerce is installed
if ! wp plugin is-installed woocommerce --path="$wp_root"; then
    log_warn "WooCommerce is not installed. Installing..."
    wp plugin install woocommerce --activate --path="$wp_root"
    log_info "WooCommerce installed and activated"
elif ! wp plugin is-active woocommerce --path="$wp_root"; then
    log_warn "WooCommerce is installed but not active. Activating..."
    wp plugin activate woocommerce --path="$wp_root"
    log_info "WooCommerce activated"
else
    log_info "WooCommerce is already active"
fi

# Set up development configuration
log_info "Setting up development configuration..."

# Create wp-config additions if they don't exist
config_additions="
// WooCommerce 1C Development Settings
if (!defined('WC1C_ENABLE_LOGGING')) define('WC1C_ENABLE_LOGGING', true);
if (!defined('WC1C_DEBUG')) define('WC1C_DEBUG', true);
if (!defined('WC1C_FILE_LIMIT')) define('WC1C_FILE_LIMIT', '100M');
if (!defined('WC1C_MAX_EXECUTION_TIME')) define('WC1C_MAX_EXECUTION_TIME', 0);
"

# Check if development settings are already in wp-config.php
if ! grep -q "WC1C_ENABLE_LOGGING" "$wp_root/wp-config.php"; then
    log_info "Adding development settings to wp-config.php..."
    
    # Create backup
    cp "$wp_root/wp-config.php" "$wp_root/wp-config.php.backup"
    
    # Add settings before the "That's all" line
    sed -i.tmp "/That's all, stop editing/i\\
$config_additions" "$wp_root/wp-config.php"
    
    rm "$wp_root/wp-config.php.tmp"
    log_info "Development settings added to wp-config.php"
else
    log_warn "Development settings already exist in wp-config.php"
fi

# Create sample test data directory
test_data_dir="$project_dir/test-data"
if [[ ! -d "$test_data_dir" ]]; then
    mkdir -p "$test_data_dir"
    
    # Create sample XML files for testing
    cat > "$test_data_dir/sample-import.xml" << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<КоммерческаяИнформация ВерсияСхемы="2.05" ДатаФормирования="2024-01-01T00:00:00">
    <Каталог СодержитТолькоИзменения="false">
        <Классификатор>
            <Группы>
                <Группа>
                    <Ид>test-category-1</Ид>
                    <Наименование>Test Category</Наименование>
                </Группа>
            </Группы>
        </Классификатор>
        <Товары>
            <Товар>
                <Ид>test-product-1</Ид>
                <Наименование>Test Product</Наименование>
                <Артикул>TEST-001</Артикул>
                <Описание>Test product description</Описание>
                <Группы>
                    <Ид>test-category-1</Ид>
                </Группы>
            </Товар>
        </Товары>
    </Каталог>
</КоммерческаяИнформация>
EOF
    
    log_info "Created test data directory with sample files"
fi

# Display setup summary
log_info "Setup completed successfully!"
echo ""
echo "📋 Setup Summary:"
echo "  • Plugin symlinked and activated"
echo "  • Required directories created"
echo "  • WooCommerce installed/activated"
echo "  • Development settings configured"
echo "  • Test data directory created"
echo ""
echo "🔗 Exchange URL: $(wp option get home --path="$wp_root")/?wc1c=exchange"
echo "📁 Data Directory: $data_dir"
echo "🧪 Test Data: $test_data_dir"
echo ""
echo "🚀 You can now start developing with the WooCommerce 1C Exchange plugin!"